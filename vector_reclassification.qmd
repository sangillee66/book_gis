---
title: "재분류"
author: Sang-Il Lee
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
lightbox: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
editor_options: 
  chunk_output_type: console
---

## 준비

필수적인 패키지를 불러온다.

```{r}
library(tidyverse)
library(sf)
library(tmap)
library(spdep)
```

서울과 관련된 데이터를 불러온다.

```{r}
#| results: hide
seoul_gu <- st_read("D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp", options = "ENCODING=CP949")
seoul_dong <- st_read("D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp", options = "ENCODING=CP949")
seoul_sido <- st_read("D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp", options = "ENCODING=CP949")
```

## 합역 Spatial Aggregation

### 무작위 합역 프로세스

다음과 같은 함수를 사용한다.

```{r}
utd.spatial.random.aggregation <- function (nhbr, m.region)
{

  # purpose: Generating a swm (gal format) of a spatial random aggregation from a binary swm of a polygon layer 
  # Arguments:
  #   nhbr: a swm (gal formal) of an input polygon layer
  #   m.region: the target number of polygons 
  # Fuction called:
  #   utd.rank.out (from Monghyeon)

##### First part: Extracting the an ggregation info (will be stored in sra.res) ragarding which areal units are aggregated to any seed areal unit

# Randomly select a set of seed units (m.region)
	n <- max(nhbr[,1])
	seed.num <- sample(1:n, m.region)
# Define two final data frames; the length of sra.res will increase, while the length of nhbr.res will decrease
	sra.res <- data.frame(seed.num, seed.num)
	nhbr.res <- nhbr
# Delete entries in nhbr.res related to the seed units
	for (i in 1:m.region)
	{
		a <- seed.num[i]
		nhbr.res <- nhbr.res[!nhbr.res[,2]==a,]
	}
# Delete entries in sra.res and add entries in sra.res while looping
	repeat
	{
		for (j in 1:m.region)
		{
			bb <- seed.num[j]
			col.set <- vector()
			nhbr.id <- sra.res[,2][sra.res[,1]==bb]
			for (dd in 1:length(nhbr.id))
			{
				nhbr.id.i <- nhbr.res[,2][nhbr.res[,1]==nhbr.id[dd]]
				col.set <- c(col.set, nhbr.id.i)
			}
			if (length(col.set)!=0)
			{
				col.selected <- sample(c(unique(col.set), bb), 1)
				if (col.selected!=bb)
				{
					sra.res <- rbind(sra.res, c(bb, col.selected))
					nhbr.res <- nhbr.res[!nhbr.res[,2]==col.selected,]
				}
			}
		if (length(nhbr.res[,1])==0) break
		}
		if (length(nhbr.res[,1])==0) break
	}	
# Obtain the final sra.res
	colnames(sra.res) <- c("seed.id", "agg.id")
	sra.res <- sra.res[order(sra.res$seed.id, sra.res$agg.id),]

##### Second part: Constructing a swm on the basis of the aggregation info (will be stored in new.swm.1)
	for (kk in 1:m.region)
	{
		nhbr.id.new <- sra.res[,2][sra.res[,1]==seed.num[kk]]
		nhbr.new.num <- length(nhbr.id.new)
		if (nhbr.new.num==0) {next}
		new.nhbr.vec <- vector()
		for (mm in 1:nhbr.new.num)
		{
			nhbr.id.old <- nhbr[,1][nhbr[,2]==nhbr.id.new[mm]]
			nhbr.old.num <- length(nhbr.id.old)
			if (nhbr.old.num==0) {next}
			for (nn in 1:nhbr.old.num)
			{
				new.nhbr.id <- sra.res[,1][sra.res[,2]==nhbr.id.old[nn]]
				new.nhbr.vec <- c(new.nhbr.vec, new.nhbr.id)
			}
		}
		new.nhbr.vec <- unique(new.nhbr.vec)
		length.vec <- length(new.nhbr.vec)
		if (kk==1)
			{new.nhbr.res <- data.frame(row.id=rep(seed.num[kk], length.vec), col.id=new.nhbr.vec)}
		else 
			{new.nhbr.res <- rbind(new.nhbr.res, cbind(row.id=rep(seed.num[kk], length.vec), col.id=new.nhbr.vec))}
	}
	new.nhbr.res <- new.nhbr.res[!new.nhbr.res[,1]==new.nhbr.res[,2],]
	new.nhbr.res <- cbind(new.nhbr.res, weights=rep(1,length(new.nhbr.res[,1])))
	new.nhbr.res <- new.nhbr.res[order(new.nhbr.res$row.id, new.nhbr.res$col.id),]

##### Third part: Updating the new swm with new IDs (will be stored in new.swm.2)
	utd.rank.out <- function(a.vec)
	{
		a.vec <- as.vector(a.vec)
		A <- as.data.frame(cbind(1:length(a.vec),a.vec))
		colnames(A) <- c("id", "value")
		B <- as.data.frame(cbind(unique(a.vec), rank(unique(a.vec))))
		colnames(B) <- c("value", "rank")
		res <- merge(A, B, by="value")
		res[order(res$id),]$rank
	}
	
	new.new.nhbr.res.1 <- as.vector(utd.rank.out(new.nhbr.res[,1]))
	new.new.nhbr.res.2 <- as.vector(utd.rank.out(new.nhbr.res[,2]))
	new.new.nhbr.res <- data.frame(row.id=new.new.nhbr.res.1, col.id=new.new.nhbr.res.2, weights=rep(1,length(new.nhbr.res[,1])))
	new.new.nhbr.res <- new.new.nhbr.res[order(new.new.nhbr.res$row.id, new.new.nhbr.res$col.id),]

	colnames(new.nhbr.res) <- c("from", "to", "weights")
	colnames(new.new.nhbr.res) <- c("from", "to", "weights")
	
	all.res <- list(sra=sra.res, new.swm.1=new.nhbr.res, new.swm.2=new.new.nhbr.res)
}

```

서울시의 426개 동을 25개로 RSA하는 한 가지 경우를 해 본다. 최종 결과로 합역의 인덱스 정보가 산출된다.

```{r}
seoul_dong_nb <- poly2nb(seoul_dong, queen=FALSE)
seoul_dong_sw <- nb2listw(seoul_dong_nb, style="B")
seoul_dong_sn <- listw2sn(seoul_dong_sw)

seoul_sra_25_1 <- utd.spatial.random.aggregation(seoul_dong_sn, 25)
seoul_sra_25_1 <- seoul_sra_25_1$sra
```

위의 결과를 바탕으로 합역을 진행한다. 우선 seoul_dong에 일련번호를 생성한다. 이것을 공통키로 사용할 것이다.

```{r}
seoul_dong <- seoul_dong |> 
  mutate(
    id = row_number()
  )
```

조인한다.

```{r}
seoul_dong_1 <- seoul_dong |> 
  left_join(seoul_sra_25_1, join_by(id == agg.id))
```

합역한다.

```{r}
seoul_dong_sra_25_1 <- seoul_dong_1 |> 
  group_by(seed.id) |> 
  mutate(
    geometry = st_union(geometry)
  )
qtm(seoul_dong_sra_25_1)
```

지도를 작성한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_1) + tm_borders(lwd = 1.5, col = "gray20") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_1) + tm_borders(lwd = 3, col = "gray20") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_재분류_합역1", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600) 
```

두 번째 합역을 시행한다.

```{r}
seoul_sra_25_2 <- utd.spatial.random.aggregation(seoul_dong_sn, 25)
seoul_sra_25_2 <- seoul_sra_25_2$sra

seoul_dong_2 <- seoul_dong |> 
  left_join(seoul_sra_25_2, join_by(id == agg.id))

seoul_dong_sra_25_2 <- seoul_dong_2 |> 
  group_by(seed.id) |> 
  mutate(
    geometry = st_union(geometry)
  )
qtm(seoul_dong_sra_25_2)
```

두 번째 지도를 작성한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_2) + tm_borders(lwd = 1.5, col = "gray20") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_2) + tm_borders(lwd = 3, col = "gray20") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_재분류_합역2", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```

세 번째 합역을 시행한다.

```{r}
seoul_sra_25_3 <- utd.spatial.random.aggregation(seoul_dong_sn, 25)
seoul_sra_25_3 <- seoul_sra_25_3$sra

seoul_dong_3 <- seoul_dong |> 
  left_join(seoul_sra_25_3, join_by(id == agg.id))

seoul_dong_sra_25_3 <- seoul_dong_3 |> 
  group_by(seed.id) |> 
  mutate(
    geometry = st_union(geometry)
  )
qtm(seoul_dong_sra_25_3)
```

세 번째 지도를 작성한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_3) + tm_borders(lwd = 1.5, col = "gray20") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_3) + tm_borders(lwd = 3, col = "gray20") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_재분류_합역3", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```

네 번째 합역을 시행한다.

```{r}
seoul_dong_nb <- poly2nb(seoul_dong, queen=FALSE)
seoul_dong_sw <- nb2listw(seoul_dong_nb, style="B")
seoul_dong_sn <- listw2sn(seoul_dong_sw)

seoul_sra_25_4 <- utd.spatial.random.aggregation(seoul_dong_sn, 25)
seoul_sra_25_4 <- seoul_sra_25_4$sra

seoul_dong_4 <- seoul_dong |> 
  left_join(seoul_sra_25_4, join_by(id == agg.id))

seoul_dong_sra_25_4 <- seoul_dong_4 |> 
  group_by(seed.id) |> 
  mutate(
    geometry = st_union(geometry)
  )
qtm(seoul_dong_sra_25_4)
```

네 번째 지도를 작성한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_4) + tm_borders(lwd = 1.5, col = "gray20") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "SGG1_NM", border.col = NULL, legend.show = FALSE) +
  tm_shape(seoul_dong_sra_25_4) + tm_borders(lwd = 3, col = "gray20") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_재분류_합역4", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```

레퍼런스 지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_dong) + tm_polygons(col = "SGG1_NM", legend.show = FALSE) +
  tm_shape(seoul_gu) + tm_polygons(alpha = 0, lwd = 1.5, border.col = "gray20") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
my_map <- tm_shape(seoul_dong) + tm_polygons(col = "SGG1_NM", legend.show = FALSE) +
  tm_shape(seoul_gu) + tm_polygons(alpha = 0, lwd = 3, border.col = "gray20") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_재분류_참조", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```
