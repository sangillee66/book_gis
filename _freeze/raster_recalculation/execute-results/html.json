{
  "hash": "63aaece92bbf926028d78aae1512120e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"재계산\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 준비\n\n필수적인 패키지를 설치한다. 래스터 분석을 위한 기본 패키지를 `raster`를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(tmap)\n```\n:::\n\n\n서울에 대한 SRTM 기반 DEM 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul.tif\")\ndem_seoul_mask <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul_mask.tif\")\n```\n:::\n\n\n서울의 행정구역 바운더리 파일을 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\")\n```\n:::\n\n\n## 정의와 종류\n\n## 수학적 연산\n\n### 산술 연산자\n\n루트값을 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul_sqrt <- sqrt(dem_seoul)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_sqrt, raster.downsample = FALSE) + \n  tm_raster(style = \"cont\", palette = \"Oranges\", title = \"Elev(sqrt)\", legend.show = TRUE) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Recalculation: Local(sqrt)\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 로그 연산자\n\n자연로그값을 산출한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul_log <- log(dem_seoul)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_log, raster.downsample = FALSE) + \n  tm_raster(style = \"cont\", palette = \"Blues\", title = \"Elev(log)\", legend.show = TRUE) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Recalculation: Local(log)\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 포컬 통계\n\n### 평균\n\n포컬 평균을 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul_focal_mean <- focal(dem_seoul, w = 3, fun = \"mean\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_focal_mean, raster.downsample = FALSE) + \n  tm_raster(style = \"cont\", palette = c(\"forestgreen\",\"yellow\",\"tan\",\"brown\"), title = \"Elev.(m)\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.06), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Recalculation: Focal(Mean)\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 표준편차\n\n포컬 표준편차를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul_focal_sd <- focal(dem_seoul, w = 3, fun = sd)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_focal_sd, raster.downsample = FALSE) + \n  tm_raster(style = \"cont\", palette = \"PuRd\", title = \"Std. Dev.\", legend.show = TRUE) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Recalculation: Focal(Standard Deviation)\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 조널 통계\n\n서울시의 구와 동을 래스터화한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_gu$SGG_ID <- as.numeric(seoul_gu$SGG1_CD)\nseoul_gu_r <- rasterize(seoul_gu, dem_seoul_mask, field = \"SGG1_CD\")\nseoul_dong$EMD_ID <- as.numeric(seoul_dong$EMD_ID)\nseoul_dong_r <- rasterize(seoul_dong, dem_seoul_mask, field = \"EMD_ID\")\n```\n:::\n\n\n### 평균\n\n서울시 구와 동의 조널 평균을 계산한다. `zonal()` 함수의 `as.raster` 아규먼트가 중요하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul_gu_mask_zonal_mean <- zonal(dem_seoul_mask, seoul_gu_r, fun = \"mean\", na.rm = TRUE, as.raster = TRUE)\ndem_seoul_dong_mask_zonal_mean <- zonal(dem_seoul_mask, seoul_dong_r, fun = \"mean\", na.rm = TRUE, as.raster = TRUE)\n```\n:::\n\n\n동에 대한 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_dong_mask_zonal_mean) + tm_raster(style = \"cont\", palette = c(\"forestgreen\",\"yellow\",\"tan\",\"brown\"), title = \"Elevation(m)\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.04, 0.04), \n            title = \"Recalculation: Zonal(Mean)\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 표준편차\n\n서울시 구와 동의 조널 표준편차를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul_gu_mask_zonal_sd <- zonal(dem_seoul_mask, seoul_gu_r, fun = \"sd\", na.rm = TRUE, as.raster = TRUE)\ndem_seoul_dong_mask_zonal_sd <- zonal(dem_seoul_mask, seoul_dong_r, fun = \"sd\", na.rm = TRUE, as.raster = TRUE)\n```\n:::\n\n\n동에 대한 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_dong_mask_zonal_sd) + tm_raster(style = \"cont\", palette = \"PuRd\", title = \"Std. Dev.\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.04, 0.04), \n            title = \"Recalculation: Zonal(Standard Deviation)\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 벡터-온-래스터\n\nDEM의 값을 구와 동으로 전이시킨다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_dong_elev <- extract(dem_seoul, seoul_dong, fun = \"mean\")\nseoul_dong$elev <- seoul_dong_elev[[2]]\nseoul_gu_elev <- extract(dem_seoul, seoul_gu, fun = \"mean\")\nseoul_gu$elev <- seoul_gu_elev[[2]]\n```\n:::\n\n\n동에 대한 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + \n  tm_polygons(col = \"elev\", style = \"cont\", palette = c(\"forestgreen\",\"yellow\",\"tan\",\"brown\"), title = \"Elevation(m)\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.04, 0.04), \n            title = \"Recalculation: vector-on-raster\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n벡터 동경계 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + tm_polygons(col = \"white\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Boundary of Dongs\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_recalculation_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "raster_recalculation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}