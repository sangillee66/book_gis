{
  "hash": "f1fb755f13578c4f6d51a235546b71e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"근접성 분석\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 버퍼링\n\n필수적인 패키지를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(readxl)\n```\n:::\n\n\n서울시의 관련 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\")\nseoul_sido <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\n```\n:::\n\n\n### 포인트 버퍼링\n\n지하철 역세권을 나타내본다. 우선, 서울시 지하철역 지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_subst_coords <- read_excel(\"D:/My R/GIS/서울시 역사마스터 정보.xlsx\") \nseoul_subst <- st_as_sf(seoul_subst_coords, coords = c(\"위도\", \"경도\"), crs = 4326)\nseoul_subst <- seoul_subst |> \n  st_transform(crs = st_crs(seoul_gu)) |> \n  st_intersection(seoul_gu)\n```\n:::\n\n\n역으로부터 반경 500미터 이내 지역을 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_subst_500 <- st_union(st_buffer(seoul_subst, dist = 500))\nqtm(seoul_subst_500)\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons(col = \"gray95\", lwd = 2) +\n  tm_shape(seoul_subst_500) + tm_polygons(col = \"gray50\", alpha = 0.5) +\n  tm_shape(seoul_subst) + tm_symbols(col = \"black\", size = 0.2) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 라인 버퍼링\n\n데이터를 불러온다. 서울시의 도로망 데이터를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sn <- st_read(\"D:/My R/Vector Data Manipulation Korea/Korea_Transport_Database/seoul_link.shp\", options = \"ENCODING=CP949\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\")\n```\n:::\n\n\n남부순환로로부터 1,000m 이내 지역에 대한 버퍼렁 만든다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnambu_cir <- seoul_sn |> \n  filter(\n    ROAD_NAME %in% c(\"남부순환로\")\n  )\nnambu_cir_1000 <- st_union(st_buffer(nambu_cir, dist = 1000))\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons(col = \"gray98\", lwd = 2) +\n  tm_shape(seoul_sn) + tm_lines(col = \"gray50\") +\n  tm_shape(nambu_cir_1000) + tm_polygons(col = \"gray50\", alpha = 0.5) +\n  tm_shape(nambu_cir) + tm_lines(col = \"red\", lwd = 3) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 폴리곤 버퍼링\n\n서울시 중구에 대해 버퍼링을 적용한다. 우선 중구를 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njung_gu <- seoul_gu |> \n  filter(\n    SGG1_NM == \"중구\"\n  )\n```\n:::\n\n\n중구로부터 2km, 5km, 10km의 버퍼를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njung_gu_2000 <- st_union(st_buffer(jung_gu, dist = 2000))\njung_gu_5000 <- st_union(st_buffer(jung_gu, dist = 5000))\njung_gu_10000 <- st_union(st_buffer(jung_gu, dist = 10000))\n\nqtm(jung_gu_10000) + qtm(jung_gu_5000) + qtm(jung_gu_2000)\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(jung_gu_10000) + tm_polygons(col = \"#fee8c8\") +\n  tm_shape(jung_gu_5000) + tm_polygons(col = \"#fdbb84\") +\n  tm_shape(jung_gu_2000) + tm_polygons(col = \"#e34a33\") +\n  tm_shape(seoul_gu, is.master = TRUE) + tm_borders() +\n  tm_shape(jung_gu) + tm_polygons(col = \"gray60\", lwd = 2) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 티센 폴로곤 Thiessen Polygons\n\n스타벅스 매장에 대한 티센 폴리곤을 생성한다. 우선, 스타벅스 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks_seoul_real <- st_read(\"D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp\")\nstarbucks_seoul_real <- st_transform(starbucks_seoul_real, crs = st_crs(seoul_sido))\n```\n:::\n\n\n티센 폴리곤을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks_seoul_thiessen <- starbucks_seoul_real |> \n  st_union() |> \n  st_voronoi(st_as_sfc(st_bbox(seoul_sido))) |> \n  st_cast() |> \n  st_intersection(seoul_sido)\nqtm(starbucks_seoul_thiessen)\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(starbucks_seoul_thiessen) + tm_polygons(col = \"gray95\") +\n  tm_shape(starbucks_seoul_real) + tm_dots(col = \"black\", size = 0.2, ) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_proximity_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "vector_proximity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}