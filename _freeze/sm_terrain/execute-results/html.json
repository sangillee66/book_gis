{
  "hash": "8b41fec6f09899bdb20bf5510862775b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"지형 분석\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 수치지형모델\n\n### 종류\n\n### DEM 데이터\n\n## DEM 분석\n\n### 준비\n\n필수적인 패키지를 설치한다. 래스터 분석을 위한 기본 패키지를 `terra`를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(tmap)\n```\n:::\n\n\n서울에 대한 SRTM 기반 DEM 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul.tif\")\ndem_seoul_mask <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul_mask.tif\")\n```\n:::\n\n\n서울의 행정구역 바운더리 파일을 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\")\n```\n:::\n\n\n### 지형 요소의 추출\n\n#### 경사\n\n`terrain()` 함수를 이용하여 경사(slope)를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_slope <- terrain(dem_seoul_mask, v = \"slope\", neighbors = 8, unit = \"degrees\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_slope, raster.downsample = FALSE) + \n  tm_raster(style = \"fixed\", breaks = c(0, 5, 10, 15, 20, 25, 30, 35, Inf), palette = \"-RdYlGn\", title = \"Slope\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Slope\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 향\n\n`terrain()` 함수를 이용하여 향(aspect)을 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_aspect <- terrain(dem_seoul_mask, v = \"aspect\", neighbors = 8, unit = \"degrees\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naspect_col <- c(\"#84D600\", \"#00AB44\", \"#0068C0\", \"#6C00A3\", \"#CA009C\", \"#FF5568\", \"#FFAB47\", \"#F4FA00\", \"#84D600\")\n\nmy_map <- tm_shape(seoul_aspect) + \n  tm_raster(style = \"fixed\", \n            breaks = c(0, 22.5, 67.5, 112.5, 157.5, 202.5, 247.5, 292.5, 337.5, 360), \n            labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\", \"N\"), \n            palette = aspect_col, title = \"Aspect\", legend.is.portrait = FALSE) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Aspect\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### TRI(Terrain Ruggedness Index)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_TRI <- terrain(dem_seoul_mask, v = \"TRI\", neighbors = 8, unit = \"degrees\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_TRI, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"Purples\", title = \"TRI\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: TRI\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### TPI(Topographic Position Index)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_TPI <- terrain(dem_seoul_mask, v = \"TRI\", neighbors = 8, unit = \"degrees\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_TPI, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"Purples\", title = \"TPI\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: TPI\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n#### Roughness\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_roughness <- terrain(dem_seoul_mask, v = \"roughness\", neighbors = 8, unit = \"degrees\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_roughness, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"Purples\", title = \"Roughness\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Roughness\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n#### Flow Direction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_flowdir <- terrain(dem_seoul_mask, v = \"flowdir\", neighbors = 8, unit = \"degrees\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_flowdir, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"Purples\", title = \"Flow Direction\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Flow Direction\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### 곡률: 종곡률(profile curvature)\n\n곡률은 `spatialEco` 패키지를 활용하여 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spatialEco)\nseoul_curv_profile <- curvature(dem_seoul_mask, type = \"profile\")\n```\n:::\n\n\n지도를 제작한다. 연속형은 별로 좋지 않을 것 같음.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_curv_profile, raster.downsample = FALSE) + tm_raster(style = \"quantile\", palette = \"BrBG\", title = \"Curvature\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Profile Curvature\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 곡률: 횡곡률(plan curvature)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_curv_plan <- curvature(dem_seoul_mask, type = \"planform\")\n```\n:::\n\n\n지도를 제작한다. 연속형은 별로 좋지 않을 것 같음.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_curv_plan, raster.downsample = FALSE) + tm_raster(style = \"quantile\", palette = \"BrBG\", title = \"Curvature\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Plan Curvature\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 시각화\n\n#### 힐셰이딩(hillshading)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_slope_radian <- terrain(dem_seoul_mask, v = \"slope\", neighbors = 8, unit = \"radians\")\nseoul_aspect_radian <- terrain(dem_seoul_mask, v = \"aspect\", neighbors = 8, unit = \"radians\")\nseoul_hillshade <- shade(seoul_slope_radian, seoul_aspect_radian, angle = 45, direction = 45, normalize = TRUE)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_hillshade, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"-Greys\", title = \"\", legend.show = FALSE) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Hillshading\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 단면도 생성(transverse profiling)\n\n이 방식이 훨씬 빠르다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts_df <- tibble(id = 1:2, X = c(126.961091, 126.992310), Y = c(37.442904, 37.660032))\npts_sf <- st_as_sf(pts_df, coords = c(\"X\", \"Y\"), crs = 4326)\n\nline_sf <- st_cast(st_as_sf(aggregate(x = pts_sf$geometry, by = list(c(1,1)), FUN = st_combine)), \"LINESTRING\") \n\n# pts_matrix <- matrix(c(126.961091, 37.442904,\n#                       126.992310, 37.660032),\n#                     ncol = 2, byrow = TRUE)\n# line_sf <- st_sfc(st_linestring(pts_matrix), crs = 4326) |> st_sf()\n\nline_sf <- st_transform(line_sf, crs = 5179)\npoints_sf <- st_line_sample(line_sf, density = 0.1)\npoints_sf <- st_cast(points_sf, \"POINT\") |> st_sf() \n\nelev_profile <- extract(dem_seoul_mask, points_sf)\nnames(elev_profile) <- c(\"distance\", \"elevation\")\nelev_profile$distance <- elev_profile$distance/100\n\nplot(elev_profile[, \"distance\"], elev_profile[, \"elevation\"], type = \"l\", \n     xlab = \"Distance (km)\", ylab = \"Elevation (m)\", main = \"Transverse Profile\")\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n다른 방식으로 해본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nline_sf <- cbind(c(126.961091, 126.992310), c(37.442904, 37.660032)) |> \n  st_linestring() |> \n  st_sfc(crs = 4326) |> \n  st_sf(geometry = _)\nline_sf$id = 1:nrow(line_sf)\npoints_sf <- st_segmentize(line_sf, dfMaxLength = 10) |> # st_segmentize()가 느리다.\n  st_cast(\"POINT\") |> \n  group_by(id) |> \n  mutate(dist = st_distance(geometry)[, 1])\n\nelev_profile <- extract(dem_seoul_mask, points_sf)\npoints_sf <- cbind(points_sf, elev_profile)\nnames(points_sf)[c(2,4)] <- c(\"distance\", \"elevation\")\npoints_sf$distance <- drop_units(points_sf$distance/1000)\n```\n:::\n\n\n그래프를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(units)\nmy_graph <- ggplot(data = elev_profile) +\n  geom_line(aes(x = distance, y = elevation)) +\n  labs(x = \"Distance(km)\", y = \"Elevation(m)\") + \n  theme(aspect.ratio = 1/4)\nmy_graph\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_hillshade, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"-Greys\", title = \"\", legend.show = FALSE) +\n  tm_shape(line_sf) + tm_lines(col = \"red\", lwd = 2) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Transverse Profiling\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 컨투어링(contouring)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_contour <- as.contour(dem_seoul_mask)\nseoul_contour <- st_as_sf(seoul_contour)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul_mask, raster.downsample = FALSE) + tm_raster(style = \"fixed\", breaks = c(-Inf, 50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, Inf), palette = \"Greys\", legend.show = FALSE) +\n  tm_shape(subset(seoul_contour, level %in% c(50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700))) + \n  tm_iso(text = \"level\", color = \"black\", lwd = 1, size = 1, alpha = 0.7) +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Contouring\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 가시성(visibility) 분석\n\n#### 가시권(viewshed) 분석\n\n우선 내 연구실의 경위도 좌표를 평면직각좌표로 전환한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_df <- tibble(lon = 126.955184, lat = 37.460422)\npoints_sf <- st_as_sf(coords_df, coords = c(\"lon\", \"lat\"), crs = 4326)\npoints_5179 <- st_transform(points_sf, crs = 5179)\nst_coordinates(points_5179)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            X       Y\n[1,] 951818.1 1940275\n```\n\n\n:::\n:::\n\n\n`terra` 패키지의 `viewshed()` 함수를 활용하여 가시역을 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_viewshed <- viewshed(dem_seoul_mask, loc = c(951818.1, 1940275), observer = 15, output = \"yes/no\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_hillshade, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"-Greys\", title = \"\", legend.show = FALSE) +\n  tm_shape(seoul_viewshed, raster.downsample = FALSE) + tm_raster(style = \"cat\", title = \"Viewshed\", alpha = 0.5) +\n  tm_shape(points_5179) + tm_symbols(col = \"black\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Viewshed\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n#### 가시선(line-of-sight) 분석\n\n10동 옥상에서 개화산 정상을 바라봤을 때의 가시선 분석을 수행한다. 우선, 옥상과 개화산 정상을 연결한 라인 피처를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts_df_1 <- tibble(id = 1:2, X = c(126.955184, 126.803605), Y = c(37.460422, 37.582374))\npts_sf_1 <- st_as_sf(pts_df_1, coords = c(\"X\", \"Y\"), crs = 4326)\nline_sf_1 <- st_cast(st_as_sf(aggregate(x = pts_sf_1$geometry, by = list(c(1,1)), FUN = st_combine)), \"LINESTRING\")\nline_sf_1 <- st_transform(line_sf_1, crs = 5179)\n```\n:::\n\n\n가시권 분석의 결과를 활용한다. 가시권면에서 라인이 지나가는 부분의 레스터 셀을 선택한다. 성공하지 못했다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lwgeom)\nlos_raster <- mask(seoul_viewshed, line_sf_1)\n\nlos_points <- as.points(los_raster) |> \n  st_as_sf()\nqtm(los_points)\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n\n```{.r .cell-code}\na <- st_split(line_sf_1, los_points)\n```\n:::\n\n\n다른 방법으로 가시선을 구한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextracted <- extract(seoul_viewshed, line_sf_1, cells = TRUE)\nextracted <- extracted[!is.na(extracted[, \"viewshed\"]), ]  # Filter out No (NA) cells\n\n# Step 3: Loop through adjacent points to create line segments with attributes\nsegments <- list()\nfor (i in 1:(nrow(extracted) - 1)) {\n  # Get coordinates for each pair of adjacent cells\n  coords <- xyFromCell(seoul_viewshed, extracted[c(i, i + 1), \"cell\"])\n  \n  # Create a line segment\n  segment <- vect(coords, type=\"line\", crs=crs(seoul_viewshed))\n  \n  # Assign Yes/No attribute (1 for Yes, NA for No) based on the first point in each pair\n  values(segment) <- data.frame(Yes_No = extracted[i, \"viewshed\"])\n  \n  # Append to list\n  segments[[i]] <- segment\n}\n\n# Step 4: Combine all segments into a single SpatVector\nline_segments <- do.call(rbind, segments)\nlos_line <- st_as_sf(line_segments)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_hillshade, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"-Greys\", title = \"\", legend.show = FALSE) +\n  tm_shape(los_line) + tm_lines(col = \"Yes_No\", lwd = 3, title.col = \"Seen or Not\") +\n    tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"DEM Analysis: Line-of-Site\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](sm_terrain_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "sm_terrain_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}