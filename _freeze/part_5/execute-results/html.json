{
  "hash": "fa17a4050a35155920150386db48b5a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"래스터-기반 GIS 오퍼레이션\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 주요 내용\n\n이 파트에서는 다음의 내용을 다룬다.\n\n-   일반화(generalization)\n\n-   측정(measurement)\n\n-   재계산(recalculation)\n\n-   재분류(reclassification)\n\n-   근접성 분석(proximity analysis)\n\n-   중첩 분석(overlay analysis)\n\n## 래스터 기초\n\n### 래스터 좌표계\n\n래스터 좌표계는 기본적으로 **그리드 좌표계**(grid coordinate system)을 사용하지만, 빠른 검색을 위해 **셀위치 좌표계**(cell position coordinate system)도 함께 사용한다.\n\n**그리드 좌표계**의 원점(0, 0)은 CRS에 의거해 주어지는 것으로 서남쪽 어딘가(보통 해당 그리드 내부에 있지 않음) 존재한다. 그러므로 동쪽과 북쪽으로 갈수록 좌표값이 증가한다. 해당 그리드의 최서남단 꼭지점에 동거와 북거가 가장 작은 지점이 존재하고, 이것을 해당 래스터의 그리드 원점이라고 부른다. 개별 래스터 데이터는 그리드 영역(extent) 정보를 가지고 있는데, 동거의 최소값과 최대값, 북거의 최소값과 최대값이 주어진다. 이 정보와 셀 크기(그리드 셀의 한 변의 길이)를 이용해 래스터 내부의 위치(주로, 개별 그리드 셀의 네 꼭지점 좌표와 셀 중심점 좌표)에 대한 좌표값을 알 수 있다.\n\n![](images/clipboard-2007320168.png)\n\n**셀위치 좌표계**의 좌표값은 지점에 대한 것이 아니라 그리드 셀 전체의 인덱스로, 해당 그리드 내에서만 통용된다. 최서북단 그리드가 원점 구실을 하고, 그 그리드 셀의 좌표값은 (0, 0)이다. 그것으로부터 동쪽으로 갈수록 셀 좌표값이 1씩 증가하고, 남쪽으로 갈수록 셀 좌표값이 1씩 증가한다. 개별 그리드 셀의 좌표값은 y 축을 먼저 읽고 다음에 x 축을 읽는 방식을 취한다. 그러므로 원점 셀 바로 아래에 있는 셀의 좌표값은 (1, 0)이다.\n\n![](images/clipboard-2947632391.png)\n\n여기에 덧붙여 **셀 일련번호**(cell number)라는 것이 있다. 이것은 셀마다 인덱스 번호를 부여한 것인데, 좌상끝에 위치한 셀에 1을 부여하고, 행별로 일련번호를 붙여나가, 우하끝에 위치한 셀에 마지막 번호를 부여한 것이다.\n\n## 래스터 레이어의 사례: 서울시 DEM\n\n### 데이터 불러오기\n\n필수적인 패키지를 설치한다. 래스터 분석을 위한 기본 패키지를 [`terra`](https://rspatial.github.io/terra/)를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(tmap)\n```\n:::\n\n\n서울에 대한 SRTM 기반 DEM 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul.tif\")\ndem_seoul_mask <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul_mask.tif\")\n```\n:::\n\n\n서울의 행정구역 바운더리 파일을 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\")\n```\n:::\n\n\n### 기본적인 지오메트리 확인\n\n기본적인 지오메트리 파라미터값을 알아본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1169, 1428, 1  (nrow, ncol, nlyr)\nresolution  : 25.92782, 25.92782  (x, y)\nextent      : 935046.3, 972071.2, 1936672, 1966982  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m +no_defs \nsource      : srtm_seoul.tif \nname        : n37_e126_1arc_v3 \nmin value   :        -31.52316 \nmax value   :        811.87531 \n```\n\n\n:::\n:::\n\n\n개별 파라미터 값을 다음과 같이 알아본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\next(dem_seoul) # 범역\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatExtent : 935046.294557821, 972071.227871716, 1936672.39531736, 1966982.02209884 (xmin, xmax, ymin, ymax)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres(dem_seoul) # 셀 크기\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25.92782 25.92782\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(dem_seoul) # 가로 세로 그리드 셀 수\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1169 1428    1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nncell(dem_seoul) # 총 그리드 셀 수\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1669332\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npersp(dem_seoul) # 3D 시각화\n```\n\n::: {.cell-output-display}\n![](part_5_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n간단히 그려본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(dem_seoul) + qtm(seoul, fill = NULL)\n```\n\n::: {.cell-output-display}\n![](part_5_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n지도를 작성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(dem_seoul, raster.downsample = FALSE) + \n  tm_raster(style = \"cont\", palette = c(\"forestgreen\",\"yellow\",\"tan\",\"brown\"), title = \"Elev.(m)\") +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.06), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"DEM for Seoul\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](part_5_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 래스터 좌표계의 왕래\n\n셀 일련번호와 셀위치 좌표계를 왕래할 수 있다. 우선 셀 일련번호를 알고 있는 경우, 그것의 셀위치 좌표의 행값을 알아내려면 다음과 같이 하면 된다. 10,000번째 셀의 셀위치 좌표계의 행값이 8, 열값이 4임을 알 수 있다. 그러므로 행위치 좌표값은 (8, 4)이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrowFromCell(dem_seoul, 10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolFromCell(dem_seoul, 10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n거꾸로 셀위치 좌표값을 알고 있는 경우, 그것의 셀 일련번호를 알아내려면 다음과 같이 하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellFromRowCol(dem_seoul, 8, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10000\n```\n\n\n:::\n:::\n\n\n또한 셀 일련번호와 그리드 좌표계를 왕래할 수 있다. 우선 셀 일련번호를 알고 있는 경우, 그것의 셀위치 좌표의 행값을 알아내려면 다음과 같이 하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxyFromCell(dem_seoul, 10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          x       y\n[1,] 935137 1966788\n```\n\n\n:::\n:::\n\n\n거꾸로 그리드 좌표값을 알고 있는 경우, 그것의 셀 일련번호를 알아내려면 다음과 같이 하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncellFromXY(dem_seoul, cbind(935137, 1966788))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10000\n```\n\n\n:::\n:::\n\n\n또한 셀위치 좌표계와 그리드 좌표계를 왕래할 수 있다. 우선 그리드의 x-좌표를 알고 있는 경우, 그것의 셀위치 좌표의 열값을 알아내려면 다음과 같이 하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolFromX(dem_seoul, 935137)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n그리드의 y-좌표를 알고 있는 경우, 그것의 셀위치 좌표의 행값을 알아내려면 다음과 같이 하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrowFromY(dem_seoul, 1966788)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n### 셀 값의 확인\n\n`extract()` 함수를 이용하면 셀 값을 얻을 수 있다. 가장 단순한 방법은 셀 일련번호를 아는 경우이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul |> \n  extract(10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  n37_e126_1arc_v3\n1         36.23445\n```\n\n\n:::\n:::\n\n\n다음으로 그리드 좌표를 아는 경우는 다음과 같이 구할 수 있다\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul |>  \n  extract(cbind(935137, 1966788))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  n37_e126_1arc_v3\n1         36.23445\n```\n\n\n:::\n:::\n\n\n셀위치 좌표를 아는 경우 막바로 구할 수 없고, 먼저 셀 일련번호로 전환한 후 구할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncell_num <- cellFromRowCol(dem_seoul, 8, 4)\ndem_seoul |> \n  extract(cell_num)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  n37_e126_1arc_v3\n1         36.23445\n```\n\n\n:::\n:::\n\n\n### 요약 통계량\n\n최소값과 최대값은 다음과 같이 구할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nminmax(dem_seoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    n37_e126_1arc_v3\nmin        -31.52316\nmax        811.87531\n```\n\n\n:::\n:::\n\n\n다음과 같이 하면 최소값과 해당 셀의 일련번호를 구할 수 있다. 그런데 에러가 난다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhere.min(dem_seoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     layer cell value\n```\n\n\n:::\n:::\n\n\n다음과 같이 하면 최대값과 해당 셀의 일련번호를 구할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhere.max(dem_seoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     layer   cell    value\n[1,]     1 259198 811.8753\n```\n\n\n:::\n:::\n\n\n이 정보를 바탕으로 최대값을 보이는 지점의 좌표값을 구할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_max_xy <- xyFromCell(dem_seoul, where.max(dem_seoul)[,2])\n```\n:::\n\n\n벡터 포인트 객체로 만들 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_max_sf <- st_sfc(geometry = st_point(dem_max_xy), crs = st_crs(seoul))\nqtm(dem_max_sf)\n```\n\n::: {.cell-output-display}\n![](part_5_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "part_5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}