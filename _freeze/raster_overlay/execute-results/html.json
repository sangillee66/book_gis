{
  "hash": "9fec51bfb9417d32f7fa10950c2c1e70",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"중첩 분석\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 준비\n\n필수적인 패키지를 설치한다. 래스터 분석을 위한 기본 패키지를 `raster`를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(tmap)\n```\n:::\n\n\n사례 데이터를 불러온다. 이것은 West Virginia 주의 한 지역에 대한 것이다. [Raster-Based Spatial Analysis in R](https://www.wvview.org/os_sa/14_Raster_Analysis.html#content)을 참고하였다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelev <- rast(\"D:/My R/GIS/래스터분석사례데이터/elevation1.tif\")\nslp <- rast(\"D:/My R/GIS/래스터분석사례데이터/slope1.tif\")\nlc <- rast(\"D:/My R/GIS/래스터분석사례데이터/lc_example.tif\")\nairports <- st_read(\"D:/My R/GIS/래스터분석사례데이터/airports.shp\")\ninterstates <- st_read(\"D:/My R/GIS/래스터분석사례데이터/interstates.shp\")\npnts <- st_read(\"D:/My R/GIS/래스터분석사례데이터/example_points.shp\")\nws <- st_read(\"D:/My R/GIS/래스터분석사례데이터/watersheds.shp\")\nstr <- st_read(\"D:/My R/GIS/래스터분석사례데이터/structures.shp\")\n```\n:::\n\n\n## 사례 분석\n\n적지 분석(suitability analysis)를 수행하고자 한다. 네 가지 조건이 개입된다.\n\n-   높은 고도\n\n-   낮은 경사도\n\n-   공항 근접성\n\n-   고속도로 근접성\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(elev) + tm_raster(style= \"cont\", title = \"Elevation(m)\") +\n  tm_shape(airports) + tm_bubbles(col=\"black\") +\n  tm_shape(interstates) + tm_lines() +\n  tm_layout(legend.outside = TRUE)\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_overlay_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n공항으로부터의 거리를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairports.raster <- rasterize(airports, elev, field = \"OBJECTID\")\nairports.dist <- distance(airports.raster)/1000\nnames(airports.dist) <- \"Distance\"\n```\n:::\n\n\n주간 고속도로로부터의 거리를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterstates.raster <- rasterize(interstates, elev, field = \"OBJECTID\")\ninterstates.dist <- distance(interstates.raster)/1000\nnames(interstates.dist) <- \"Distance\"\n```\n:::\n\n\n### 이항 모델: 보수적 모델\n\n이항 모델의 규준은 다음과 같이 주어진다.\n\n-   고도: 500m 초과\n\n-   경사도: 15도 미만\n\n-   공항 근접성: 공항으로부터 7km 이내\n\n-   고속도로 근접성: 주간 고속도로로부터 5km 이내\n\n네 조건에 대한 재분류를 실행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelev_binary <- elev > 500\nnames(elev_binary) <- \"Reclassified\"\nele_b <- tm_shape(elev_binary) + tm_raster(style=\"cat\", title = \"> 500m\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Elevation\")\n\nslp_binary <- slp < 15\nnames(slp_binary) <- \"Reclassified\"\nslp_b <- tm_shape(slp_binary) + tm_raster(style=\"cat\", title = \"< 15\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Slope\")\n\nair_binary <- airports.dist < 7\nnames(air_binary) <- \"Reclassified\"\nairport_b <- tm_shape(air_binary) + tm_raster(style=\"cat\", title = \"< 7km\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Airports\")\n\ninter_binary <- interstates.dist < 5\nnames(inter_binary) <- \"Reclassified\"\ninterstate_b <- tm_shape(inter_binary) + tm_raster(style=\"cat\", title = \"< 5km\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Interstates\")\n```\n:::\n\n\n재분류 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tmap_arrange(ele_b, slp_b, airport_b, interstate_b)\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_overlay_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n최종 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc_model <- elev_binary*slp_binary*air_binary*inter_binary\nmy_map <- tm_shape(c_model) + tm_raster(style = \"cat\", labels = c(\"Not Suitable\", \"Suitable\"), title = \"Decision\") +\n  tm_layout(legend.outside = TRUE)\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_overlay_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 점수-가중치 모델(진보적 모델)\n\n점수-가중치 모델의 규준은 다음과 같다.\n\n-   고도: 높을수록 더 선호\n\n-   경사도: 낮을수록 더 선호\n\n-   공항 근접성: 가까울수록 더 선호\n\n-   고속도로 근접성: 가까울수록 더 선호\n\n네 조건에 대한 재분류를 실행한다. `global()` 함수를 통해 최대값과 최소값을 구한 뒤, 범위 표준화를 적용하여 분류 순위부여(classification ranking)을 수행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelev_min <- global(elev, fun = \"min\", na.rm = TRUE)[1, 1]\nelev_max <- global(elev, fun = \"max\", na.rm = TRUE)[1, 1]\nelev_score <- ((elev - elev_min)/(elev_max - elev_min))\nnames(elev_score) <- \"Reclassified\"\nele_s <- tm_shape(elev_score) + tm_raster(style=\"cont\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Elevation\")\n\nslp_min <- global(slp, fun = \"min\", na.rm = TRUE)[1, 1]\nslp_max <- global(slp, fun = \"max\", na.rm = TRUE)[1, 1]\nslp_score <- 1 - ((slp - slp_min)/(slp_max - slp_min))\nnames(slp_score) <- \"Reclassified\"\nslp_s <- tm_shape(slp_score) + tm_raster(style=\"cont\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Slope\")\n\nair_min <- global(airports.dist, fun = \"min\", na.rm = TRUE)[1, 1]\nair_max <- global(airports.dist, fun = \"max\", na.rm = TRUE)[1, 1]\nair_score <- 1 - ((airports.dist - air_min)/(air_max - air_min))\nnames(air_score) <- \"Reclassified\"\nairport_s <- tm_shape(air_score) + tm_raster(style=\"cont\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Airports\")\n\ninter_min <- global(interstates.dist, fun = \"min\", na.rm = TRUE)[1, 1]\ninter_max <- global(interstates.dist, fun = \"max\", na.rm = TRUE)[1, 1]\ninter_score <- 1- (interstates.dist - inter_min)/(inter_max - inter_min)\nnames(inter_score) <- \"Reclassified\"\ninterstate_s <- tm_shape(inter_score) + tm_raster(style=\"cont\") +\n  tm_legend(legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(main.title=\"Interstates\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tmap_arrange(ele_s, slp_s, airport_s, interstate_s)\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_overlay_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n최종 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwo_model <- (elev_score*.1)+(slp_score*.4)+(air_score*.2)+(inter_score*.3) \nmy_map <- tm_shape(wo_model) + tm_raster(style=\"cont\", title = \"Weighted Scores\") +\n  tm_layout(legend.outside = TRUE)\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_overlay_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "raster_overlay_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}