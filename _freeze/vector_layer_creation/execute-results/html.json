{
  "hash": "609a15f78ed01e4b3094d34ecc113740",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"벡터 레이어 생성\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 경위도 좌표값을 이용한 지오코딩(Geocoding)\n\n서울 열린데이터 광장에서 구한 지하철역의 경위도 좌표값을 바탕으로 포인트 레이터를 생성한다.\n\n필수 패키지를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(readxl)\n```\n:::\n\n\n서울시의 관련 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\", options = \"ENCODING=CP949\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\", options = \"ENCODING=CP949\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\", options = \"ENCODING=CP949\")\n```\n:::\n\n\n서울 지하철역 위치 관련 데이터를 불러와 sf 객체를 생성한다. 그것을 디스크에 저장한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_subst_coords <- read_excel(\"D:/My R/GIS/서울시 역사마스터 정보.xlsx\") \n\nseoul_subst_coords |> \n  st_as_sf(coords = c(\"위도\", \"경도\"), crs = 4326) |> \n  st_transform(crs = st_crs(seoul)) |> \n  st_intersection(seoul) -> seoul_subst\n\nst_write(seoul_subst, dsn = \"D:/My R/Vector Data Manipulation Korea/seoul_subst.shp\", driver = \"ESRI Shapefile\", append = FALSE, layer_options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting layer `seoul_subst' using driver `ESRI Shapefile'\nWriting layer `seoul_subst' to data source \n  `D:/My R/Vector Data Manipulation Korea/seoul_subst.shp' using driver `ESRI Shapefile'\noptions:        ENCODING=CP949 \nWriting 401 features with 7 fields and geometry type Point.\n```\n\n\n:::\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(seoul_gu) + tm_polygons(col = \"gray95\") +\n  tm_shape(seoul_subst) + tm_symbols(col = \"black\", size = 0.15) +\n  tm_legend(legend.position = c(0.75, 0.03)) +\n  tm_add_legend(type = \"symbol\", size = 0.80, col = \"black\", shape = 16, labels = \"Subway Stations\", title = \"\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Geocoding: Coordinates\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 주소를 이용한 지오코딩\n\n스타벅스 데이터 속에는 주소 컬럼도 있지만 경위도 좌표값도 포함되어 있다. 우선 위의 지하철역과 동일한 방식으로 지오코딩을 실행하고 `sf` 객체를 생성한 후 디스크에 저장한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks <- read_excel(\"D:/My R/GIS/스타벅스.xlsx\") # 주소 파일 불러오기\nstarbucks |> \n  distinct(\n    Sotre_nm, .keep_all = TRUE\n  ) -> starbucks\n\nstarbucks |> \n  st_as_sf(coords = c(\"Xcoordinate\", \"Ycoordinate\"), crs = 4326) |> \n  st_transform(crs = st_crs(seoul)) |> \n  st_intersection(seoul) -> starbucks_seoul_real\n  \nst_write(starbucks_seoul_real, dsn = \"D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp\", driver = \"ESRI Shapefile\", append = FALSE, layer_options = \"ENCODING=CP949\")\n```\n:::\n\n\n위의 방식으로 만들어진 스타벅스의 실제 위치에 대한 파일을 불러들인다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks_seoul_real <- st_read(\"D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp\")\n```\n:::\n\n\n다음은 스타벅스의 주소를 기반으로 `ggmap` 패키지의 오픈 API를 이용하여 지오코딩하는 과정을 보여준다. 생성된 `sf` 객체를 디스크에 저장하는 과정까지 포함되어 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggmap)\n\nmy_google_key = \"\"\nregister_google(key = my_google_key) # 구글 키 등록\n\nstarbucks |> pull(Address) |> \n  as.character() |> \n  enc2utf8() |> \n  geocode(\n    key = key, \n    simplify = TRUE\n  ) |> \n  filter(\n    !is.na(lon)\n  ) -> starbucks_geocode\n\nstarbucks_geocode |> \n  bind_cols(starbucks) |> \n  filter(\n    !is.na(lon)\n  ) -> starbucks_geocode_final\n\nstarbucks_geocode_final |> \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) |> \n  st_transform(crs = st_crs(seoul)) |> \n  st_intersection(seoul) -> starbucks_seoul\n\nst_write(starbucks_seoul, dsn = \"D:/My R/Vector Data Manipulation Korea/starbucks_seoul_geocode.shp\", driver = \"ESRI Shapefile\", append = FALSE, layer_options = \"ENCODING=CP949\")\n```\n:::\n\n\n위에서 생성된 스타벅스의 주소 지오코딩 파일을 불러들인다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks_seoul_geocoding <- st_read(\"D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp\", options = \"ENCODING=CP949\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons(col = \"gray95\") +\n  tm_shape(starbucks_seoul_real) + tm_dots(col = \"red\", size = 0.15, alpha = 1) +\n  tm_shape(starbucks_seoul_geocoding) + tm_dots(col = \"black\", size = 0.2, alpha = 0.3) +\n  tm_legend(legend.position = c(0.75, 0.03)) +\n  tm_add_legend(type = \"symbol\", size = 0.80, col = \"black\", shape = 16, labels = \"Starbucks\", title = \"\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Geocoding: Addresses\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 센트로이드\n\n### 컨벡스헐(convex hull)\n\n`st_convex_hull()` 함수를 이용하여 서울시 구에 대한 컨벡스헐을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_gu |> \n  st_convex_hull() -> seoul_gu_ch\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons() +\n  tm_shape(seoul_gu_ch) + tm_borders(col = \"red\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### 최소포괄직사각형(minimum bounding rectangle)\n\nst_bbox() 함수를 활용하면 MBR을 생성할 수 있다. 우선 서울시 전체의 MBR을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_gu |> \n  st_bbox() |> \n  st_as_sfc() -> seoul_mbr\n```\n:::\n\n\n그런데 서울시 구 각각에 대해 MBR을 만드는 것은 쉽지 않다. `map()` 함수를 활용하여 구 각각에 대한 MBR을 생성하고 그것을 모두 합쳐 하나의 `sf` 객체를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbbox_wrap <- function(x) st_as_sfc(st_bbox(x))\nseoul_gu_mbr <- seoul_gu |> \n  group_by(SGG1_CD) |> \n  nest() |> \n  ungroup() |> \n  mutate(\n    bbox = map(data, bbox_wrap)\n  ) |> \n  mutate(\n    geometry = st_sfc(unlist(bbox, recursive = FALSE), crs = st_crs(seoul))\n  ) |> \n  select(-data, -bbox) |> \n  st_as_sf()\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons() +\n  tm_shape(seoul_gu_mbr) + tm_borders(col = \"red\", lty = 2, lwd = 1) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Minimum Bounding Rectangle\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 평균중심점(MC)\n\n## 최소포괄직사각형중심점(CMBR)\n\n`st_centroid()` 함수를 이용하여 앞에서 생성한 CMB의 센트로이드를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_gu_mbr |> \n  st_centroid() -> seoul_gu_mbr_center\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons() +\n  tm_shape(seoul_gu_mbr) + tm_borders(col = \"red\", lty = 2, lwd = 1) +\n  tm_shape(seoul_gu_mbr_center) + tm_dots(col = \"black\", size = 0.15) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"CMBR\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 질량중심점(CM)\n\n`st_centroid()` 함수를 이용하여 서울시 구의 질량중심점을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_gu |> \n  st_centroid() -> seoul_gu_cm\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons() +\n  tm_shape(seoul_gu_cm) + tm_dots(col = \"black\", size = 0.15) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Center of Mass\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n`st_centroid()` 함수를 이용하여 서울시 동의 질량중심점을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_dong |> \n  st_centroid() -> seoul_dong_cm\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + tm_polygons() +\n  tm_shape(seoul_dong_cm) + tm_dots(col = \"black\", size = 0.15) +\n  tm_shape(seoul_gu) + tm_borders(col = \"black\", lwd = 1) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Center of Mass\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n그런데 일부 질량중심점이 폴리곤의 외부에 위치할 수 있다. 이 문제는 `st_point_on_surface()` 함수를 사용하여 교정할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_dong |> \n  st_point_on_surface() -> seoul_dong_cm_on\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + tm_polygons() +\n  tm_shape(seoul_dong_cm_on) + tm_dots(col = \"black\", size = 0.15) +\n  tm_shape(seoul_gu) + tm_borders(col = \"black\", lwd = 1) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Center of Mass 2\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_layer_creation_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "vector_layer_creation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}