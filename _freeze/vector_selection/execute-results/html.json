{
  "hash": "3dc74ef8164a83432bbc0d8cb8f61b45",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"공간적 선택\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 공간적 관계에 기반한 공간적 선택\n\n### 준비\n\n필수적인 패키지를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(tmap)\nlibrary(readxl)\n```\n:::\n\n\n서울의 관련 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\", options = \"ENCODING=CP949\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\", options = \"ENCODING=CP949\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\", options = \"ENCODING=CP949\")\n```\n:::\n\n\n### 포인트-투-포인트\n\n지하철역에 가장 가까이에 위치한 스타벅스를 선택한다. 우선 9장에서 생성한 지하철역 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_subst <- st_read(\"D:/My R/Vector Data Manipulation Korea/seoul_subst.shp\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `seoul_subst' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\seoul_subst.shp' using driver `ESRI Shapefile'\nSimple feature collection with 401 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 938028.4 ymin: 1938762 xmax: 971377.4 ymax: 1965651\nProjected CRS: KGD2002 / Unified CS\n```\n\n\n:::\n:::\n\n\n마찬가지로 9장에서 생성한 스타벅스 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks_seoul_real <- st_read(\"D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp\", options = \"ENCODING=CP949\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\noptions:        ENCODING=CP949 \nReading layer `starbucks_seoul' from data source \n  `D:\\My R\\Vector Data Manipulation Korea\\starbucks_seoul.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 520 features and 9 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 939637.5 ymin: 1938775 xmax: 971226.8 ymax: 1962474\nProjected CRS: KGD2002 / Unified CS\n```\n\n\n:::\n:::\n\n\n공간적 관계에 기반한 공간적 선택을 실행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_subst |> \n  st_nearest_feature(starbucks_seoul_real) -> starbucks_index\nstarbucks_seoul_real |> \n  slice(starbucks_index) |> \n  distinct(\n    Sotre_nm, .keep_all = TRUE\n  ) -> starbucks_closest_station_unique\n```\n:::\n\n\n지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.map <- tm_shape(seoul_gu) + tm_polygons(lwd = 2, col = \"gray95\") +\n  tm_shape(starbucks_seoul_real) + tm_dots(size = 0.15, col = \"gray50\") +\n  tm_shape(seoul_subst) + tm_dots(size = 0.15, col = \"#377eb8\") +\n  tm_shape(starbucks_closest_station_unique) + tm_dots(size = 0.15, col = \"#e41a1c\") +\n  tm_legend(legend.position = c(0.75, 0.03)) +\n  tm_add_legend(type = \"symbol\", size = 0.50, col = c(\"#377eb8\", \"#e41a1c\", \"gray50\"), shape = 16, labels = c(\"Subway Stations (401)\", \"Nearest Starbucks (254)\", \"Not Selected Starbucks (266)\"), title = \"\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Spatial Selection: Point-to-Point\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy.map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 포인트-인-폴리곤\n\n관악구 내의 스타벅스만 선택한다. 우선 관악구만 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwanak_gu <- seoul_gu |> \n  filter(\n    SGG1_NM == \"관악구\"\n  )\n```\n:::\n\n\n관악구 내에 포함되는 스타벅스를 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# starbucks_gwanak <- starbucks_seoul_real[which(lengths(st_intersects(starbucks_seoul_real, gwanak_gu)) > 0), ]\n\nstarbucks_seoul_real |> \n  st_intersects(gwanak_gu) |> \n  lengths() > 0 -> sel_vec\nstarbucks_seoul_real |> \n  filter(sel_vec) -> starbucks_gwanak\n```\n:::\n\n\n지도로 나타낸다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu) + tm_polygons(col = \"gray98\", lwd = 1) +\n  tm_shape(gwanak_gu) + tm_polygons(col = \"gray70\") +\n  tm_shape(starbucks_seoul_real) + tm_dots(col = \"black\", size = 0.15) +\n  tm_shape(starbucks_gwanak) + tm_dots(col = \"red\", size = 0.2) +\n  tm_legend(legend.position = c(0.80, 0.05)) +\n  tm_add_legend(type = \"symbol\", size = 0.50, col = \"black\", shape = 16, labels = \"Starbucks\", title = \"\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Spatial Selection: Point-in-Polygon\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 라인-온-폴리곤\n\n서울시 도로망 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sn <- st_read(\"D:/My R/Vector Data Manipulation Korea/Korea_Transport_Database/seoul_link.shp\", options = \"ENCODING=CP949\")\n```\n:::\n\n\n중구만 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njung_gu <- seoul_gu |> \n  filter(\n    SGG1_NM == \"중구\"\n  )\n```\n:::\n\n\n중구와 인터섹터의 관계에 있는 도로만 선택한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sn |> \n  st_intersects(jung_gu) |> \n  lengths() > 0 -> sel_index\nseoul_sn |> \n  filter(sel_index) -> jung_gu_sn\n```\n:::\n\n\n지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_gu, is.master = TRUE) + tm_polygons(col = \"gray98\", border.col = \"gray10\", lwd = 2) +\n  tm_shape(jung_gu) + tm_polygons(col = \"gray70\", border.col = \"gray10\", lwd = 2) +\n  tm_shape(seoul_sn) + tm_lines(col = \"gray70\") +\n  tm_shape(jung_gu_sn) + tm_lines(col = \"red\", lwd = 2) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Spatial Selection: Line-on-Polygon\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n중구만 확대한 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(jung_gu) + tm_polygons(col = \"gray70\", border.col = \"gray10\", lwd = 2) +\n  tm_shape(seoul_sn) + tm_lines(col = \"gray70\") +\n  tm_shape(jung_gu_sn) + tm_lines(col = \"red\", lwd = 2) +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + \n  tm_scale_bar(breaks = seq(0, 2, 0.5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 폴리곤-온-폴리곤\n\n남부순환로로부터 1,000m 이내 지역에 대한 버퍼를 통해 동을 선택한다. 우선 버퍼를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnambu_cir <- seoul_sn |> \n  filter(\n    ROAD_NAME %in% c(\"남부순환로\")\n  )\nnambu_cir |> \n  st_buffer(dist = 1000) |> \n  st_union() -> nambu_cir_1000\n```\n:::\n\n\n'일부 교차', '센트로이드 포함', '완전 포함'으로 분류하기 위한 작업을 한다. 우선 동의 센트로이드를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_dong |> \n  st_centroid() -> seoul_dong_centroid\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 일부 교차\nseoul_dong |> \n  st_intersects(nambu_cir_1000) |> \n  lengths() > 0 -> sel_index_1\nseoul_dong |> \n  filter(sel_index_1) -> seoul_dong_1\n\n# 센트로이드 포함\nseoul_dong_centroid |> \n  st_intersects(nambu_cir_1000) |> \n  lengths() > 0 -> sel_index_2\nseoul_dong |> \n  filter(sel_index_2) -> seoul_dong_2\n\n# 완전 포함\nseoul_dong |> \n  st_covered_by(nambu_cir_1000) |> \n  lengths() > 0 -> sel_index_3\nseoul_dong |> \n  filter(sel_index_3) -> seoul_dong_3\n```\n:::\n\n\n'일부 교차'에 대한 지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + tm_polygons(col = \"gray98\", border.col = \"gray30\") +\n  tm_shape(seoul_dong_1) + tm_polygons(col = \"gray50\", border.col = \"gray30\") +\n  tm_shape(nambu_cir_1000) + tm_borders(col = \"black\", lwd = 3) +\n  tm_shape(seoul_gu) + tm_borders(lwd = 2, col = \"gray20\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Spatial Selection: Polygon-on-Polygon 1\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n'센트로이드 포함'에 대한 지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + tm_polygons(col = \"gray98\", border.col = \"gray30\") +\n  tm_shape(seoul_dong_2) + tm_polygons(col = \"gray50\", border.col = \"gray30\") +\n  tm_shape(nambu_cir_1000) + tm_borders(col = \"black\", lwd = 3) +\n  tm_shape(seoul_gu) + tm_borders(lwd = 2, col = \"gray20\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Spatial Selection: Polygon-on-Polygon 2\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n'완전 포함'에 대한 지도를 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_dong) + tm_polygons(col = \"gray98\", border.col = \"gray30\") +\n  tm_shape(seoul_dong_3) + tm_polygons(col = \"gray50\", border.col = \"gray30\") +\n  tm_shape(nambu_cir_1000) + tm_borders(col = \"black\", lwd = 3) +\n  tm_shape(seoul_gu) + tm_borders(lwd = 2, col = \"gray20\") +\n  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), \n            title = \"Spatial Selection: Polygon-on-Polygon 3\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 5), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](vector_selection_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "vector_selection_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}