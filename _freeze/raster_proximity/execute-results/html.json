{
  "hash": "0097238292ab76bb588642209beaf14b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"근접성 분석\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 준비\n\n필수적인 패키지를 설치한다. 래스터 분석을 위한 기본 패키지를 `terra`를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(terra)\nlibrary(sf)\nlibrary(tmap)\n```\n:::\n\n\n서울에 대한 SRTM 기반 DEM 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndem_seoul <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul.tif\")\ndem_seoul_mask <- rast(\"D:/My R/World Data Manupulation/USGS EarthExplorer/srtm_seoul_mask.tif\")\n```\n:::\n\n\n서울의 행정구역 바운더리 파일을 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\nseoul_gu <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp\")\nseoul_dong <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp\")\n```\n:::\n\n\n서울의 소방서 위치를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sobang <- st_read(\"D:/My R/Vector Data Manipulation Korea/Seoul_Data_Plaza/sobang_station_seoul.shp\", options = \"ENCODING=CP949\")\nseoul_sobang <- st_transform(seoul_sobang, crs = st_crs(seoul))\n```\n:::\n\n\n## 정의와 산출 레이어\n\n## 유클리드 거리\n\n### 거리\n\n소방서로부터의 유클리드 거리를 계산한다. `distance()` 함수에서 첫 번째 인수가 raster이면 모든 NA셀(소방서가 없는 셀)로부터 비NA 셀(소방서가 위치한 셀) 중 가장 가까이 있는 것까지의 거리를 계산해준다. 첫 번째 인수가 vector이면 모든 피처간의 거리 매트릭스를 산출해 준다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sobang_r <- rasterize(seoul_sobang, dem_seoul, field = \"ID\")\nseoul_sobang_dist_1 <- distance(seoul_sobang_r)/1000\nseoul_sobang_dist_1_mask <- mask(seoul_sobang_dist_1, seoul)\n```\n:::\n\n\n지도를 제작한다. 먼저 연속형 컬러 스킴을 사용하여 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_sobang_dist_1_mask, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"GnBu\", title = \"Distance(km)\") +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Euclidean Distance from Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n이번에는 단계구분형 컬러 스킴을 사용하여 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_sobang_dist_1_mask, raster.downsample = FALSE) + tm_raster(style = \"fixed\", breaks = c(0, 1, 2, 3, 4, 5, Inf), palette = \"GnBu\", title = \"Distance(km)\") +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Euclidean Distance from Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 할당\n\n함수를 만든다. `raster` 패키지의 `rasterToPoints()` 함수가 `terra` 패키지에서는 `as.points()` 함수로 바뀌었다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnu.rasterAlloc <- function(feature, rastermask){\n  p <- st_as_sf(as.points(rastermask))\n  p <- st_transform(p, crs = st_crs(feature))\n  p$indx <- st_nearest_feature(st_geometry(p), st_geometry(feature))\n  output <- rasterize(p, rastermask, field = \"indx\")\n  return(output)\n}\n```\n:::\n\n\n할당면을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sobang_allo <- snu.rasterAlloc(seoul_sobang, dem_seoul_mask)\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_sobang_allo, raster.downsample = FALSE) + tm_raster(style = \"cat\", palette = \"Set3\", legend.show = FALSE) +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Euclidean Distance: Allocation Layer for Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n티센 폴리곤을 생성하여 비교해 본다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseoul_sobang_thiessen <- seoul_sobang |> \n  st_union() |> \n  st_voronoi(st_as_sfc(st_bbox(seoul))) |> \n  st_cast() |> \n  st_intersection(seoul) |> \n  st_as_sf() |> \n  st_cast(\"POLYGON\")\n\nseoul_sobang_thiessen$ID <- unlist(st_intersects(seoul_sobang_thiessen, seoul_sobang)) \nseoul_sobang_thiessen <- aggregate(seoul_sobang_thiessen, by = list(seoul_sobang_thiessen$ID), FUN = sum)\nseoul_sobang_thiessen$ID <- as.factor(seoul_sobang_thiessen$ID) \n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul) + tm_polygons(col = \"gray98\", border.col = \"gray30\") +\n  tm_shape(seoul_sobang_thiessen) + tm_polygons(col = \"ID\", palette = \"Set3\", lwd = 1, border.col = \"gray20\", legend.show = FALSE) +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Thiessen Polygons for Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## 기능적 거리\n\n`movecost` 패키지를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(devtools)\n# install_github(\"cran/movecost\")\nlibrary(movecost)\n```\n:::\n\n\n### 거리\n\n`movecost()` 함수를 이용하여 기능적 거리를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# result_cost <- movecost(dem_seoul_mask, origin = as_Spatial(seoul_sobang), funct = \"wcs\")\n# seoul_sobang_cost <- result_cost$accumulated.cost.raster/1000\n# crs(seoul_sobang_cost) <- \"+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m\"\n# writeRaster(seoul_sobang_cost, \"seoul_sobang_cost\", format=\"GTiff\", overwrite = TRUE)\nseoul_sobang_cost <- rast(\"seoul_sobang_cost.tif\")\n```\n:::\n\n\n지도를 제작한다. 먼저 연속형 컬러 스킴을 사용하여 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_sobang_cost, raster.downsample = FALSE) + tm_raster(style = \"cont\", palette = \"GnBu\", title = \"Least Cost\") +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Functional Distance from Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n이번에는 단계구분형 컬러 스킴을 사용하여 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_sobang_cost, raster.downsample = FALSE) + tm_raster(style = \"fixed\", breaks = c(0, 1, 2, 3, 4, 5, Inf), palette = \"GnBu\", title = \"Least Cost\") +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Functional Distance from Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n### 할당\n\n`movealloc()` 함수를 활용하여 할당 레이어를 계산한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# result_allo <- movealloc(dem_seoul_mask, as_Spatial(seoul_sobang), funct = \"wcs\")\n# seoul_sobang_allo_cost <- result_allo$cost.allocation.raster\n# crs(seoul_sobang_allo_cost) <- \"+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +units=m\"\n# writeRaster(seoul_sobang_allo_cost, \"seoul_sobang_allo_cost\", format=\"GTiff\", overwrite = TRUE)\nseoul_sobang_allo_cost <- rast(\"seoul_sobang_allo_cost.tif\")\n```\n:::\n\n\n지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(seoul_sobang_allo_cost, raster.downsample = FALSE) + tm_raster(style = \"cat\", palette = \"Set3\", legend.show = FALSE) +\n  tm_shape(seoul_sobang) + tm_symbols() +\n  tm_shape(seoul) + tm_borders(col = \"gray20\", lwd = 1.5) +\n  tm_legend(legend.position = c(0.85, 0.03), legend.bg.color = \"white\", legend.bg.alpha = 0.6) +\n  tm_layout(inner.margins = c(0.07, 0.04, 0.06, 0.04), \n            title = \"Functional Distance: Allocation for Fire Stations\", title.size = 1, \n            title.position = c(\"LEFT\", \"TOP\")) + \n  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = \"gray60\", position = c(0.03, 0.01))\nmy_map\n```\n\n::: {.cell-output-display}\n![](raster_proximity_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "raster_proximity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}