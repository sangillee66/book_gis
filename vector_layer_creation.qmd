---
title: "벡터 레이어 생성"
author: Sang-Il Lee
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
lightbox: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
editor_options: 
  chunk_output_type: console
---

## 경위도 좌표값을 이용한 지오코딩(Geocoding)

서울 열린데이터 광장에서 구한 지하철역의 경위도 좌표값을 바탕으로 포인트 레이터를 생성한다.

필수 패키지를 불러온다.

```{r}
library(tidyverse)
library(sf)
library(tmap)
library(readxl)
```

서울시의 관련 데이터를 불러온다.

```{r}
#| results: hide
seoul <- st_read("D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp", options = "ENCODING=CP949")
seoul_gu <- st_read("D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_GU_2023_2Q.shp", options = "ENCODING=CP949")
seoul_dong <- st_read("D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_EMD_2023_2Q.shp", options = "ENCODING=CP949")
```

서울 지하철역 위치 관련 데이터를 불러와 sf 객체를 생성한다. 그것을 디스크에 저장한다.

```{r}
seoul_subst_coords <- read_excel("D:/My R/GIS/서울시 역사마스터 정보.xlsx") 

seoul_subst_coords |> 
  st_as_sf(coords = c("위도", "경도"), crs = 4326) |> 
  st_transform(crs = st_crs(seoul)) |> 
  st_intersection(seoul) -> seoul_subst

st_write(seoul_subst, dsn = "D:/My R/Vector Data Manipulation Korea/seoul_subst.shp", driver = "ESRI Shapefile", append = FALSE, layer_options = "ENCODING=CP949")
```

지도를 제작한다.

```{r}
tm_shape(seoul_gu) + tm_polygons(col = "gray95") +
  tm_shape(seoul_subst) + tm_symbols(col = "black", size = 0.15) +
  tm_legend(legend.position = c(0.75, 0.03)) +
  tm_add_legend(type = "symbol", size = 0.80, col = "black", shape = 16, labels = "Subway Stations", title = "") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "Geocoding: Coordinates", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
```

```{r}
#| echo: false
#| output: false
my_map <- 
  tm_shape(seoul_gu) + tm_polygons(col = "gray95") +
  tm_shape(seoul_subst) + tm_symbols(col = "black", size = 0.3) +
  tm_legend(legend.title.size = 1.25, legend.text.size = 1.25, legend.position = c(0.820, 0.08)) +
  tm_add_legend(type = "symbol", size = 0.70, col = "black", shape = 16, labels = "Subway Stations", title = "") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "Geocoding: Coordinates", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_지오코딩_서울지하철", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```

## 주소를 이용한 지오코딩

스타벅스 데이터 속에는 주소 컬럼도 있지만 경위도 좌표값도 포함되어 있다. 우선 위의 지하철역과 동일한 방식으로 지오코딩을 실행하고 `sf` 객체를 생성한 후 디스크에 저장한다.

```{r}
#| eval: false

starbucks <- read_excel("D:/My R/GIS/스타벅스.xlsx") # 주소 파일 불러오기
starbucks |> 
  distinct(
    Sotre_nm, .keep_all = TRUE
  ) -> starbucks

starbucks |> 
  st_as_sf(coords = c("Xcoordinate", "Ycoordinate"), crs = 4326) |> 
  st_transform(crs = st_crs(seoul)) |> 
  st_intersection(seoul) -> starbucks_seoul_real
  
st_write(starbucks_seoul_real, dsn = "D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp", driver = "ESRI Shapefile", append = FALSE, layer_options = "ENCODING=CP949")
```

위의 방식으로 만들어진 스타벅스의 실제 위치에 대한 파일을 불러들인다.

```{r}
#| results: hide
starbucks_seoul_real <- st_read("D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp")
```

다음은 스타벅스의 주소를 기반으로 `ggmap` 패키지의 오픈 API를 이용하여 지오코딩하는 과정을 보여준다. 생성된 `sf` 객체를 디스크에 저장하는 과정까지 포함되어 있다.

```{r}
#| eval: false
library(ggmap)

my_google_key = ""
register_google(key = my_google_key) # 구글 키 등록

starbucks |> pull(Address) |> 
  as.character() |> 
  enc2utf8() |> 
  geocode(
    key = key, 
    simplify = TRUE
  ) |> 
  filter(
    !is.na(lon)
  ) -> starbucks_geocode

starbucks_geocode |> 
  bind_cols(starbucks) |> 
  filter(
    !is.na(lon)
  ) -> starbucks_geocode_final

starbucks_geocode_final |> 
  st_as_sf(coords = c("lon", "lat"), crs = 4326) |> 
  st_transform(crs = st_crs(seoul)) |> 
  st_intersection(seoul) -> starbucks_seoul

st_write(starbucks_seoul, dsn = "D:/My R/Vector Data Manipulation Korea/starbucks_seoul_geocode.shp", driver = "ESRI Shapefile", append = FALSE, layer_options = "ENCODING=CP949")
```

위에서 생성된 스타벅스의 주소 지오코딩 파일을 불러들인다.

```{r}
#| results: hide
starbucks_seoul_geocoding <- st_read("D:/My R/Vector Data Manipulation Korea/starbucks_seoul.shp", options = "ENCODING=CP949")
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "gray95") +
  tm_shape(starbucks_seoul_real) + tm_dots(col = "red", size = 0.15, alpha = 1) +
  tm_shape(starbucks_seoul_geocoding) + tm_dots(col = "black", size = 0.2, alpha = 0.3) +
  tm_legend(legend.position = c(0.75, 0.03)) +
  tm_add_legend(type = "symbol", size = 0.80, col = "black", shape = 16, labels = "Starbucks", title = "") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "Geocoding: Addresses", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_gu) + tm_polygons(col = "gray95") +
  tm_shape(starbucks_seoul_real) + tm_dots(col = "red", size = 0.5, alpha = 1) +
  tm_shape(starbucks_seoul_geocoding) + tm_dots(col = "black", size = 0.5, alpha = 0.3) +
  tm_legend(legend.title.size = 1.25, legend.text.size = 1.25, legend.position = c(0.820, 0.08)) +
  tm_add_legend(type = "symbol", size = 0.80, col = "black", shape = 16, labels = "Starbucks", title = "") +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "Geocoding: Addresses", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_지오코딩_스타벅스", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```

## 센트로이드

### 컨벡스헐(convex hull)

`st_convex_hull()` 함수를 이용하여 서울시 구에 대한 컨벡스헐을 생성한다.

```{r}
seoul_gu |> 
  st_convex_hull() -> seoul_gu_ch
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_ch) + tm_borders(col = "red") +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04)) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

### 최소포괄직사각형(minimum bounding rectangle)

st_bbox() 함수를 활용하면 MBR을 생성할 수 있다. 우선 서울시 전체의 MBR을 생성한다.

```{r}
seoul_gu |> 
  st_bbox() |> 
  st_as_sfc() -> seoul_mbr
```

그런데 서울시 구 각각에 대해 MBR을 만드는 것은 쉽지 않다. `map()` 함수를 활용하여 구 각각에 대한 MBR을 생성하고 그것을 모두 합쳐 하나의 `sf` 객체를 생성한다.

```{r}
bbox_wrap <- function(x) st_as_sfc(st_bbox(x))
seoul_gu_mbr <- seoul_gu |> 
  group_by(SGG1_CD) |> 
  nest() |> 
  ungroup() |> 
  mutate(
    bbox = map(data, bbox_wrap)
  ) |> 
  mutate(
    geometry = st_sfc(unlist(bbox, recursive = FALSE), crs = st_crs(seoul))
  ) |> 
  select(-data, -bbox) |> 
  st_as_sf()
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_mbr) + tm_borders(col = "red", lty = 2, lwd = 1) +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "Minimum Bounding Rectangle", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_mbr) + tm_borders(col = "red", lty = 2, lwd = 2) +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "Minimum Bounding Rectangle", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_센트로이드_mbr", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)

```

## 평균중심점(MC)

## 최소포괄직사각형중심점(CMBR)

`st_centroid()` 함수를 이용하여 앞에서 생성한 CMB의 센트로이드를 생성한다.

```{r}
seoul_gu_mbr |> 
  st_centroid() -> seoul_gu_mbr_center
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_mbr) + tm_borders(col = "red", lty = 2, lwd = 1) +
  tm_shape(seoul_gu_mbr_center) + tm_dots(col = "black", size = 0.15) +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "CMBR", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_mbr) + tm_borders(col = "red", lty = 2, lwd = 2) +
  tm_shape(seoul_gu_mbr_center) + tm_dots(col = "black", size = 0.3) +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "CMBR", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_센트로이드_cmbr", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600)
```

## 질량중심점(CM)

`st_centroid()` 함수를 이용하여 서울시 구의 질량중심점을 생성한다.

```{r}
seoul_gu |> 
  st_centroid() -> seoul_gu_cm
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_cm) + tm_dots(col = "black", size = 0.15) +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "Center of Mass", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_gu) + tm_polygons() +
  tm_shape(seoul_gu_cm) + tm_dots(col = "black", size = 0.3) +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "Center of Mass", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_센트로이드_cm_구", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600) 
```

`st_centroid()` 함수를 이용하여 서울시 동의 질량중심점을 생성한다.

```{r}
seoul_dong |> 
  st_centroid() -> seoul_dong_cm
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_dong) + tm_polygons() +
  tm_shape(seoul_dong_cm) + tm_dots(col = "black", size = 0.15) +
  tm_shape(seoul_gu) + tm_borders(col = "black", lwd = 1) +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "Center of Mass", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_dong) + tm_polygons() +
  tm_shape(seoul_dong_cm) + tm_dots(col = "black", size = 0.15) +
  tm_shape(seoul_gu) + tm_borders(col = "black", lwd = 2) +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "Center of Mass", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_센트로이드_cm_동", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600) 
```

그런데 일부 질량중심점이 폴리곤의 외부에 위치할 수 있다. 이 문제는 `st_point_on_surface()` 함수를 사용하여 교정할 수 있다.

```{r}
seoul_dong |> 
  st_point_on_surface() -> seoul_dong_cm_on
```

지도를 제작한다.

```{r}
my_map <- tm_shape(seoul_dong) + tm_polygons() +
  tm_shape(seoul_dong_cm_on) + tm_dots(col = "black", size = 0.15) +
  tm_shape(seoul_gu) + tm_borders(col = "black", lwd = 1) +
  tm_layout(inner.margins = c(0.06, 0.04, 0.04, 0.04), 
            title = "Center of Mass 2", title.size = 1, 
            title.position = c("LEFT", "TOP")) + 
  tm_scale_bar(breaks = seq(0, 20, 4), color.dark = "gray60", position = c(0.03, 0.01))
my_map
```

```{r}
#| echo: false
#| output: false
my_map <- tm_shape(seoul_dong) + tm_polygons() +
  tm_shape(seoul_dong_cm_on) + tm_dots(col = "red", size = 0.2) +
  tm_shape(seoul_gu) + tm_borders(col = "black", lwd = 2) +
  tm_layout(inner.margins = c(0.05, 0.04, 0.04, 0.04), 
            title = "Center of Mass 2", title.size = 2,
            title.position = c(0.02, 0.97)) + 
  tm_scale_bar(breaks = seq(0, 20, 5), text.size = 0.6, color.dark = "gray60", position = c(0.03, 0.01)) +
  tm_credits(text = "SANG-IL LEE, Geography Education at SNU, 2024", size = 0.8, position = c(0.76, 0.01))
my_map 
my.path.name <- "D:/My Classes/2024년 2학기/지리정보체계와 지리교육/이미지/"
my.file.name <- paste0(my.path.name, "벡터_센트로이드_cm_동_on", ".jpg")
tmap_save(my_map, filename = my.file.name, height = 12.1, dpi = 600) 
```
